# -*- coding: utf-8 -*-
"""IIE_PENSER.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1HH_1XsYuk3pxaKF4gei68-NYxK3opR-S
"""

from google.colab import files
uploaded = files.upload()

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.decomposition import PCA
from sklearn.preprocessing import StandardScaler


sns.set_theme(style="whitegrid")
pd.options.display.max_columns = 50

df = pd.read_excel(list(uploaded.keys())[0])

df.head()

import pandas as pd
import numpy as np

# ------------------------------
# 1. Función auxiliar
# ------------------------------
def calcular_componente(df, preguntas, mapping):
    comp = pd.Series(0, index=df.index, dtype=float)
    for p in preguntas:
        if p in df.columns:
            if p in mapping:  # si la columna tiene un diccionario de valores
                comp += df[p].map(mapping[p]).fillna(0)
    return comp

# ------------------------------
# 2. Definir listas de preguntas
# ------------------------------

preguntas_FD = [
    "I.1. ¿Se encuentra laborando actualmente? ",
    "I.2.2. Tipo de vinculación",
    "I.2.4. Tipo de cargo",
    "I.4. Indique su percepción frente a la siguiente afirmación: “El programa académico del cual me gradué es pertinente con relación a las demandas del entorno social y académico” ",
]

preguntas_DCI = [
    "II 9. A partir de la siguiente escala indique el nivel en que la Universidad favoreció en usted el desarrollo de las siguientes competencias transversales.  [COMUNICACIÓN EFECTIVA: expresar con claridad, y en forma apropiada al contexto y la cultura, lo q",
    "II 9. A partir de la siguiente escala indique el nivel en que la Universidad favoreció en usted el desarrollo de las siguientes competencias transversales.  [RELACIONES INTERPERSONALES: establecer y conservar relaciones significativas, así como ser capaz ",
    "II 9. A partir de la siguiente escala indique el nivel en que la Universidad favoreció en usted el desarrollo de las siguientes competencias transversales.  [TOMA DE DECISIONES: evaluar distintas alternativas, teniendo en cuenta necesidades, capacidades, ",
    "II 9. A partir de la siguiente escala indique el nivel en que la Universidad favoreció en usted el desarrollo de las siguientes competencias transversales.  [SOLUCIÓN DE PROBLEMAS Y CONFLICTOS: transformar y manejar los problemas y conflictos de la vida d",
    "II 9. A partir de la siguiente escala indique el nivel en que la Universidad favoreció en usted el desarrollo de las siguientes competencias transversales.  [PENSAMIENTO CREATIVO: usar la razón y la “pasión” (emociones, sentimientos, intuición, fantasías ",
    "II 9. A partir de la siguiente escala indique el nivel en que la Universidad favoreció en usted el desarrollo de las siguientes competencias transversales.  [PENSAMIENTO CRÍTICO: aprender a preguntarse, investigar y no aceptar las cosas de forma crédula. ",
]

preguntas_MS = [
    "III.12. En cuanto a su nivel de responsabilidad económica en el hogar, usted se identifica como: ",
    "III.18. ¿El valor actual de sus ingresos mensuales es superior al valor de los ingresos mensuales durante su último año de estudio? ",
]

preguntas_PMCV = [
    "IV.20.  Indique su apreciación frente a la siguiente afirmación: “La formación recibida en la universidad ha sido un aspecto determinante en el mejoramiento de mi calidad de vida\".  ",
    "III. 19.1 ¿Considera que las condiciones de su vivienda (infraestructura, ubicación, servicios básicos, entre otros) han mejorado desde que obtuvo su título universitario?",
]

"""# Metodologia A"""

# ------------------------------
# 3. Definir mappings
# ------------------------------

# --- Metodología A (según artículo, valores originales simplificados como ejemplo)
mapping_a = {
    "I.1. ¿Se encuentra laborando actualmente? ": {"Sí": 0.03, "No": 0.00},
    "I.2.2. Tipo de vinculación": {"Contrato laboral": 0.05, "Prestación de servicios": 0.03, "Otro": 0.01},
    "I.2.4. Tipo de cargo": {"Directivo": 0.05, "Profesional": 0.03, "Técnico": 0.02, "Otro": 0.01},
    "I.4. Indique su percepción frente a la siguiente afirmación: “El programa académico del cual me gradué es pertinente con relación a las demandas del entorno social y académico” ": {"Totalmente de acuerdo": 0.05, "De acuerdo": 0.03, "Neutral": 0.01, "En desacuerdo": 0},

    # Competencias transversales (escala 1-5)
    preguntas_DCI[0]: {"Muy insuficiente": 0.00, "Insuficiente": 0.01, "Neutral": 0.02, "Suficiente": 0.03, "Muy suficiente": 0.05},
    preguntas_DCI[1]: {"Muy insuficiente": 0.00, "Insuficiente": 0.01, "Neutral": 0.02, "Suficiente": 0.03, "Muy suficiente": 0.05},
    preguntas_DCI[2]: {"Muy insuficiente": 0.00, "Insuficiente": 0.01, "Neutral": 0.02, "Suficiente": 0.03, "Muy suficiente": 0.05},

    # MS
    "III.18. ¿El valor actual de sus ingresos mensuales es superior al valor de los ingresos mensuales durante su último año de estudio? ": {"Sí": 0.05, "No": 0.00},

    # PMCV
    "IV.20.  Indique su apreciación frente a la siguiente afirmación: “La formación recibida en la universidad ha sido un aspecto determinante en el mejoramiento de mi calidad de vida\".  ": {"Totalmente de acuerdo": 0.05, "De acuerdo": 0.03, "Neutral": 0.01, "En desacuerdo": 0},
}

"""# Metodologia B"""

# --- Metodología B (ajustada con escala 0–1)
mapping_b = {
    "I.1. ¿Se encuentra laborando actualmente? ": {"Sí": 1.0, "No": 0.0},
    "I.2.2. Tipo de vinculación": {"Contrato laboral": 1.0, "Prestación de servicios": 0.75, "Otro": 0.5},
    "I.2.4. Tipo de cargo": {"Directivo": 1.0, "Profesional": 0.75, "Técnico": 0.5, "Otro": 0.25},
    "I.4. Indique su percepción frente a la siguiente afirmación: “El programa académico del cual me gradué es pertinente con relación a las demandas del entorno social y académico” ": {"Totalmente de acuerdo": 1.0, "De acuerdo": 0.75, "Neutral": 0.5, "En desacuerdo": 0.25},

    # Competencias transversales
    preguntas_DCI[0]: {"Muy insuficiente": 0.1, "Insuficiente": 0.25, "Neutral": 0.5, "Suficiente": 0.75, "Muy suficiente": 1.0},
    preguntas_DCI[1]: {"Muy insuficiente": 0.1, "Insuficiente": 0.25, "Neutral": 0.5, "Suficiente": 0.75, "Muy suficiente": 1.0},
    preguntas_DCI[2]: {"Muy insuficiente": 0.1, "Insuficiente": 0.25, "Neutral": 0.5, "Suficiente": 0.75, "Muy suficiente": 1.0},

    # MS
    "III.18. ¿El valor actual de sus ingresos mensuales es superior al valor de los ingresos mensuales durante su último año de estudio? ": {"Sí": 1.0, "No": 0.0},

    # PMCV
    "IV.20.  Indique su apreciación frente a la siguiente afirmación: “La formación recibida en la universidad ha sido un aspecto determinante en el mejoramiento de mi calidad de vida\".  ": {"Totalmente de acuerdo": 1.0, "De acuerdo": 0.75, "Neutral": 0.5, "En desacuerdo": 0.25},
}

# ------------------------------
# 4. Pesos globales
# ------------------------------
pesos = {"FD":0.30, "DCI":0.30, "MS":0.20, "PMCV":0.20}

# ------------------------------
# 5. Cálculo componentes A
# ------------------------------
df["FD"] = calcular_componente(df, preguntas_FD, mapping_a)
df["DCI"] = calcular_componente(df, preguntas_DCI, mapping_a)
df["MS"] = calcular_componente(df, preguntas_MS, mapping_a)
df["PMCV"] = calcular_componente(df, preguntas_PMCV, mapping_a)

df["IIE_A"] = (df["FD"]*pesos["FD"] +
               df["DCI"]*pesos["DCI"] +
               df["MS"]*pesos["MS"] +
               df["PMCV"]*pesos["PMCV"])

# ------------------------------
# 6. Cálculo componentes B
# ------------------------------
df["FD_B"] = calcular_componente(df, preguntas_FD, mapping_b)
df["DCI_B"] = calcular_componente(df, preguntas_DCI, mapping_b)
df["MS_B"] = calcular_componente(df, preguntas_MS, mapping_b)
df["PMCV_B"] = calcular_componente(df, preguntas_PMCV, mapping_b)

df["IIE_B"] = (df["FD_B"]*pesos["FD"] +
               df["DCI_B"]*pesos["DCI"] +
               df["MS_B"]*pesos["MS"] +
               df["PMCV_B"]*pesos["PMCV"])

# ------------------------------
# 7. Verificar resultados
# ------------------------------
print(df[["IIE_A","IIE_B"]].head())

# ===============================
# Histograma comparativo
# ===============================
plt.figure(figsize=(10,6))
plt.hist(df["IIE_A"], bins=20, alpha=0.5, label="IIE A", color="red")
plt.hist(df["IIE_B"], bins=20, alpha=0.5, label="IIE B", color="orange")
plt.title("Distribución del Índice de Impacto de Egresados (IIE)")
plt.xlabel("Valor del índice")
plt.ylabel("Frecuencia")
plt.legend()
plt.show()

# ===============================
# Boxplot comparativo
# ===============================
plt.figure(figsize=(8,6))
plt.boxplot([df["IIE_A"], df["IIE_B"]], labels=["IIE A", "IIE B"])
plt.title("Comparación de IIE_A vs IIE_B (Boxplot)")
plt.ylabel("Valor del índice")
plt.show()

# ===============================
# Gráfico de dispersión
# ===============================
plt.figure(figsize=(8,6))
plt.scatter(df["IIE_A"], df["IIE_B"], alpha=0.5, color="blue")
plt.title("Relación entre IIE_A y IIE_B")
plt.xlabel("IIE_A")
plt.ylabel("IIE_B")
plt.show()

# ===============================
# Promedio por Programa Académico (Top 10)
# ===============================
promedios_programa = (
    df.groupby("PROGRAMA ACADEMICO")[["IIE_A","IIE_B"]]
      .mean()
      .sort_values("IIE_B", ascending=False)
      .head(10)
)

promedios_programa.plot(kind="bar", figsize=(12,6), color=["gray","lightgray"])
plt.title("Top 10 Programas Académicos según IIE promedio")
plt.ylabel("Promedio del índice")
plt.xticks(rotation=45, ha="right")
plt.show()

import matplotlib.pyplot as plt
import seaborn as sns

plt.figure(figsize=(12,6))
sns.histplot(data=df,
             x="IIE_A",
             hue="Sede o Seccional",
             kde=True,
             element="step",
             alpha=0.5)
plt.title("Distribución del IIE_A por Sede")
plt.xlabel("IIE_A")
plt.ylabel("Frecuencia")
plt.legend(title="Sede o Seccional")
plt.show()

import matplotlib.pyplot as plt
import seaborn as sns

plt.figure(figsize=(12,6))
sns.histplot(data=df,
             x="IIE_B",
             hue="Sede o Seccional",
             kde=True,
             element="step",
             alpha=0.5)
plt.title("Distribución del IIE_A por Sede")
plt.xlabel("IIE_A")
plt.ylabel("Frecuencia")
plt.legend(title="Sede o Seccional")
plt.show()

import matplotlib.pyplot as plt

plt.figure(figsize=(12,6))

for sede in df["Sede o Seccional"].dropna().unique():
    plt.hist(df[df["Sede o Seccional"] == sede]["IIE_A"],
             bins=20, alpha=0.5, label=sede)

plt.title("Distribución del IIE_A por Sede o Seccional")
plt.xlabel("IIE_A")
plt.ylabel("Frecuencia")
plt.legend(title="Sede o Seccional")
plt.show()

# Obtener las sedes únicas
sedes = df["Sede o Seccional"].dropna().unique()

plt.figure(figsize=(12,6))

# Hacer un histograma por cada sede
for sede in sedes:
    plt.hist(df[df["Sede o Seccional"] == sede]["IIE_A"],
             bins=20, alpha=0.5, label=sede)

plt.title("Distribución del IIE_A por Sede o Seccional")
plt.xlabel("IIE_A")
plt.ylabel("Frecuencia")
plt.legend()
plt.show()

plt.figure(figsize=(12,6))
data = [df[df["Sede o Seccional"] == sede]["IIE_A"] for sede in sedes]
plt.boxplot(data, labels=sedes)
plt.title("Comparación del IIE_A por Sede")
plt.ylabel("IIE_A")
plt.xticks(rotation=45, ha="right")
plt.show()

plt.figure(figsize=(12,6))
data = [df[df["Sede o Seccional"] == sede]["IIE_B"] for sede in sedes]
plt.boxplot(data, labels=sedes)
plt.title("Comparación del IIE_B por Sede")
plt.ylabel("IIE_B")
plt.xticks(rotation=45, ha="right")
plt.show()

promedios_sede = df.groupby("Sede o Seccional")[["IIE_A","IIE_B"]].mean()

promedios_sede.plot(kind="bar", figsize=(12,6), color=["gray","lightgray"])
plt.title("Promedio de IIE_A e IIE_B por Sede o Seccional")
plt.ylabel("Promedio del índice")
plt.xticks(rotation=45, ha="right")
plt.show()

import seaborn as sns
import matplotlib.pyplot as plt

# Seleccionar solo columnas relevantes
corr_vars = ["FD", "DCI", "MS", "PMCV", "IIE_A", "IIE_B"]
corr = df[corr_vars].corr()

plt.figure(figsize=(8,6))
sns.heatmap(corr, annot=True, cmap="Blues", fmt=".2f")
plt.title("Matriz de Correlaciones entre Componentes e Índices")
plt.show()

# Seleccionar los 5 programas con mayor promedio en IIE_B
top_programas = (
    df.groupby("PROGRAMA ACADEMICO")["IIE_B"]
      .mean()
      .sort_values(ascending=False)
      .head(5)
      .index
)

plt.figure(figsize=(12,6))
for prog in top_programas:
    plt.hist(df[df["PROGRAMA ACADEMICO"] == prog]["IIE_B"],
             bins=15, alpha=0.5, label=prog)

plt.title("Distribución del IIE_B en los Top 5 Programas Académicos")
plt.xlabel("IIE_B")
plt.ylabel("Frecuencia")
plt.legend()
plt.show()

from sklearn.decomposition import PCA
from sklearn.preprocessing import StandardScaler

# Usamos los cuatro componentes como base
X = df[["FD", "DCI", "MS", "PMCV"]].fillna(0)

# Estandarización
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# PCA
pca = PCA(n_components=2)
X_pca = pca.fit_transform(X_scaled)

print("Varianza explicada por los componentes principales:")
print(pca.explained_variance_ratio_)

# Gráfico PCA
plt.figure(figsize=(8,6))
plt.scatter(X_pca[:,0], X_pca[:,1], alpha=0.5, color="black")
plt.xlabel("Componente Principal 1")
plt.ylabel("Componente Principal 2")
plt.title("Análisis PCA de los Componentes del IIE")
plt.show()